{"version":3,"sources":["components/PlayListAdd.js","components/TrackAdd.js","components/PlayListsPage.js","App.js","serviceWorker.js","index.js"],"names":["PlayListAdd","state","playlist","handleInputPlayList","event","newPlaylist","target","value","setState","handleCreatePlayList","body","name","axios","post","headers","Authorization","then","alert","console","log","catch","err","type","this","onChange","onClick","React","Component","TrackAdd","artist","url","handleInputName","newName","handleInputArtist","newArtist","handleInputURL","newURL","handleAddTrackOnClick","axiosConfig","params","playlistId","id","htmlFor","PlayListPage","playlists","getPlayLists","get","response","data","result","list","handleDeletePlaylist","playlistID","delete","handleAddTracks","map","App","currentPage","togglePageOnClick","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uRA0DeA,E,4MAtDbC,MAAQ,CACNC,SAAU,I,EAGZC,oBAAsB,SAACC,GACrB,IAAMC,EAAcD,EAAME,OAAOC,MAEjC,EAAKC,SAAS,CAAEN,SAAUG,K,EAG5BI,qBAAuB,WACrB,IAMMC,EAAO,CACXC,KAAM,EAAKV,MAAMC,UAGnBU,IACGC,KACC,sEACAH,EAbgB,CAClBI,QAAS,CACPC,cAAe,wBAchBC,MAAK,WACJC,MAAM,YAAD,OAAa,EAAKhB,MAAMC,SAAxB,wBACLgB,QAAQC,IAAI,EAAKlB,MAAMC,UACvB,EAAKM,SAAS,CAAEN,SAAU,QAE3BkB,OAAM,SAACC,GACNJ,MAAM,6BACNC,QAAQC,IAAIE,O,uDAKhB,OACE,oCACE,6BACE,2BACEC,KAAK,OACLf,MAAOgB,KAAKtB,MAAMC,SAClBsB,SAAUD,KAAKpB,sBAEjB,4BAAQsB,QAASF,KAAKd,sBAAtB,0B,GAhDgBiB,IAAMC,WCqFjBC,E,4MApFb3B,MAAQ,CACNU,KAAM,GACNkB,OAAQ,GACRC,IAAK,I,EAGPC,gBAAkB,SAAC3B,GACjB,IAAM4B,EAAU5B,EAAME,OAAOC,MAE7B,EAAKC,SAAS,CAAEG,KAAMqB,K,EAGxBC,kBAAoB,SAAC7B,GACnB,IAAM8B,EAAY9B,EAAME,OAAOC,MAE/B,EAAKC,SAAS,CAAEqB,OAAQK,K,EAG1BC,eAAiB,SAAC/B,GAChB,IAAMgC,EAAShC,EAAME,OAAOC,MAE5B,EAAKC,SAAS,CAAEsB,IAAKM,K,EAGvBC,sBAAwB,WACtB,IAAMC,EAAc,CAClBxB,QAAS,CACPC,cAAe,sBAEjBwB,OAAQ,CACNC,WAAY,EAAKvC,MAAMwC,KAIrB/B,EAAO,CACXC,KAAM,EAAKV,MAAMU,KACjBkB,OAAQ,EAAK5B,MAAM4B,OACnBC,IAAK,EAAK7B,MAAM6B,KAGlBlB,IACGC,KADH,yFAGIH,EACA4B,GAEDtB,MAAK,WACJC,MAAM,GAAD,OAAI,EAAKhB,MAAMU,KAAf,gB,uDAKT,OACE,6BACE,2BAAO+B,QAAQ,QAAf,SACA,2BACEpB,KAAK,OACLX,KAAK,OACL8B,GAAG,OACHlC,MAAOgB,KAAKtB,MAAMU,KAClBa,SAAUD,KAAKQ,kBAEjB,2BAAOW,QAAQ,UAAf,YACA,2BACEpB,KAAK,OACLmB,GAAG,SACH9B,KAAK,SACLJ,MAAOgB,KAAKtB,MAAM4B,OAClBL,SAAUD,KAAKU,oBAEjB,2BAAOS,QAAQ,OAAf,sBACA,2BACEpB,KAAK,OACLmB,GAAG,MACH9B,KAAK,MACLJ,MAAOgB,KAAKtB,MAAM6B,IAClBN,SAAUD,KAAKY,iBAEjB,4BAAQV,QAASF,KAAKc,uBAAtB,wB,GA/EeX,IAAMC,WCCvBW,EAAc,CAClBxB,QAAS,CACPC,cAAe,uBAoEJ4B,E,4MA/Db1C,MAAQ,CACN2C,UAAW,I,EAObC,aAAe,WACbjC,IACGkC,IACC,sEACAR,GAEDtB,MAAK,SAAC+B,GACL,EAAKvC,SAAS,CAAEoC,UAAWG,EAASC,KAAKC,OAAOC,UAEjD9B,OAAM,SAACC,GACNH,QAAQC,IAAIE,O,EAIlB8B,qBAAuB,SAACC,GACtBxC,IACGyC,OADH,8EAE2ED,GACvEd,GAEDtB,MAAK,WACJC,MAAM,mCACN,EAAK4B,kBAENzB,OAAM,SAACC,GACNH,QAAQC,IAAR,sBAA2BE,Q,EAIjCiC,gBAAkB,a,kEAhChB/B,KAAKsB,iB,+BAqCG,IAAD,OACP,OACE,oCACE,6BACGtB,KAAKtB,MAAM2C,UAAUW,KAAI,SAACrD,GACzB,OACE,4BACE,wBAAIuB,QAAS,EAAK6B,iBAAkBpD,EAASS,MAC7C,4BAAQc,QAAS,kBAAM,EAAK0B,qBAAqBjD,EAASuC,MAA1D,SAMN,kBAAC,EAAD,Y,GAzDiBf,IAAMC,WCyBlB6B,E,4MA7BbvD,MAAQ,CACNwD,YAAa,e,EAGfC,kBAAoB,WACa,gBAA3B,EAAKzD,MAAMwD,YACb,EAAKjD,SAAS,CAAEiD,YAAa,kBAE7B,EAAKjD,SAAS,CAAEiD,YAAa,iB,uDAK/B,OACE,oCACE,yBAAKE,UAAU,OACb,mCACA,4BAAQlC,QAASF,KAAKmC,mBAAtB,aAC4B,gBAA3BnC,KAAKtB,MAAMwD,YACV,kBAAC,EAAD,MAEA,kBAAC,EAAD,Y,GAtBM/B,IAAMC,WCOJiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdtD,OAAM,SAAAuD,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.fa11a500.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass PlayListAdd extends React.Component {\n  state = {\n    playlist: '',\n  };\n\n  handleInputPlayList = (event) => {\n    const newPlaylist = event.target.value;\n\n    this.setState({ playlist: newPlaylist });\n  };\n\n  handleCreatePlayList = () => {\n    const axiosConfig = {\n      headers: {\n        Authorization: 'diogo-gaspar-mello',\n      },\n    };\n\n    const body = {\n      name: this.state.playlist,\n    };\n\n    axios\n      .post(\n        'https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists',\n        body,\n        axiosConfig\n      )\n      .then(() => {\n        alert(`Playlist ${this.state.playlist} criada com sucesso`);\n        console.log(this.state.playlist);\n        this.setState({ playlist: '' });\n      })\n      .catch((err) => {\n        alert(`Deu ruim, tente novamente`);\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n      <>\n        <div>\n          <input\n            type=\"text\"\n            value={this.state.playlist}\n            onChange={this.handleInputPlayList}\n          />\n          <button onClick={this.handleCreatePlayList}>Add New PlayList</button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default PlayListAdd;\n","import React from 'react';\nimport axios from 'axios';\n\nclass TrackAdd extends React.Component {\n  state = {\n    name: '',\n    artist: '',\n    url: '',\n  };\n\n  handleInputName = (event) => {\n    const newName = event.target.value;\n\n    this.setState({ name: newName });\n  };\n\n  handleInputArtist = (event) => {\n    const newArtist = event.target.value;\n\n    this.setState({ artist: newArtist });\n  };\n\n  handleInputURL = (event) => {\n    const newURL = event.target.value;\n\n    this.setState({ url: newURL });\n  };\n\n  handleAddTrackOnClick = () => {\n    const axiosConfig = {\n      headers: {\n        Authorization: 'diogo-gaspar-mello',\n      },\n      params: {\n        playlistId: this.state.id,\n      },\n    };\n\n    const body = {\n      name: this.state.name,\n      artist: this.state.artist,\n      url: this.state.url,\n    };\n\n    axios\n      .post(\n        `https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists/:playlistId/tracks`,\n        body,\n        axiosConfig\n      )\n      .then(() => {\n        alert(`${this.state.name} funfou`);\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <label htmlFor=\"name\">Nome:</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={this.state.name}\n          onChange={this.handleInputName}\n        />\n        <label htmlFor=\"artist\">Artista:</label>\n        <input\n          type=\"text\"\n          id=\"artist\"\n          name=\"artist\"\n          value={this.state.artist}\n          onChange={this.handleInputArtist}\n        />\n        <label htmlFor=\"url\">Link da música:</label>\n        <input\n          type=\"text\"\n          id=\"url\"\n          name=\"url\"\n          value={this.state.url}\n          onChange={this.handleInputURL}\n        />\n        <button onClick={this.handleAddTrackOnClick}>Adiciona Faixas</button>\n      </div>\n    );\n  }\n}\n\nexport default TrackAdd;\n","import React from 'react';\nimport axios from 'axios';\nimport TrackAdd from './TrackAdd';\n\nconst axiosConfig = {\n  headers: {\n    Authorization: 'diogo-gaspar-mello',\n  },\n};\n\nclass PlayListPage extends React.Component {\n  state = {\n    playlists: [],\n  };\n\n  componentDidMount() {\n    this.getPlayLists();\n  }\n\n  getPlayLists = () => {\n    axios\n      .get(\n        'https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists',\n        axiosConfig\n      )\n      .then((response) => {\n        this.setState({ playlists: response.data.result.list });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  handleDeletePlaylist = (playlistID) => {\n    axios\n      .delete(\n        `https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists/${playlistID}`,\n        axiosConfig\n      )\n      .then(() => {\n        alert(`Usuário apagado com sucesso!`);\n        this.getPlayLists();\n      })\n      .catch((err) => {\n        console.log(`O ERRO FOI: ${err}`);\n      });\n  };\n\n  handleAddTracks = () => {\n\n  }\n\n\n  render() {\n    return (\n      <>\n        <div>\n          {this.state.playlists.map((playlist) => {\n            return (\n              <ul>\n                <li onClick={this.handleAddTracks}>{playlist.name}</li>\n                <button onClick={() => this.handleDeletePlaylist(playlist.id)}>\n                  X\n                </button>\n              </ul>\n            );\n          })}\n          <TrackAdd/>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default PlayListPage;\n","import React from 'react';\nimport './App.css';\nimport PlayListAdd from './components/PlayListAdd';\nimport PlayListPage from './components/PlayListsPage';\n\nclass App extends React.Component {\n  state = {\n    currentPage: 'PlayListAdd',\n  };\n\n  togglePageOnClick = () => {\n    if (this.state.currentPage === 'PlayListAdd') {\n      this.setState({ currentPage: 'PlayListsPage' });\n    } else {\n      this.setState({ currentPage: 'PlayListAdd' });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <h1>opa</h1>\n          <button onClick={this.togglePageOnClick}>PlayLists</button>\n          {this.state.currentPage === 'PlayListAdd' ? (\n            <PlayListAdd />\n          ) : (\n            <PlayListPage />\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n\n// http://awful-bottle.surge.sh/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}