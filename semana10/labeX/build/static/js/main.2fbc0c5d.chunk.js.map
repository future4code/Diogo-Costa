{"version":3,"sources":["Pages/HomePage.js","Pages/LoginPage.js","Pages/ApplicationFormPage.js","Pages/ListTripsPage.js","Router.js","styles/GlobalStyles.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","history","useHistory","onClick","push","LoginPage","ApplicationFormPage","ListTripPage","Router","exact","path","ListTripsPage","GlobalStyles","styled","div","App","style","textAlign","background","height","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAsCeA,EAnCE,WACf,IAAMC,EAAUC,cAsBhB,OACE,6BACE,wCACA,4BAAQC,QAnBS,WACnBF,EAAQG,KAAK,WAkBX,gBACA,4BAAQD,QAhBW,WACrBF,EAAQG,KAAK,aAeX,iBACA,4BAAQD,QAbS,WACnBF,EAAQG,KAAK,WAYX,iBACA,4BAAQD,QA1BU,WACpBF,EAAQG,KAAK,YAyBX,iBACA,4BAAQD,QAXY,WACtBF,EAAQG,KAAK,cAUX,sBCfSC,EAfG,WAChB,IAAMJ,EAAUC,cAMhB,OACE,6BACE,yCACA,4BAAQC,QAPS,WACnBF,EAAQG,KAAK,OAMX,UCKSE,EAfa,WAC1B,IAAML,EAAUC,cAMhB,OACE,6BACE,oCACA,4BAAQC,QAPS,WACnBF,EAAQG,KAAK,OAMX,UCKSG,EAfM,WACnB,IAAMN,EAAUC,cAMhB,OACE,6BACE,oCACA,uBAAGC,QAPc,WACnBF,EAAQG,KAAK,OAMX,4B,kCC2BSI,EA9BA,WACb,OACE,6BACE,sCACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAChB,kBAAC,IAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAChB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,YAChB,kBAAC,IAAD,W,2GC9BL,IAAME,E,MAAeC,EAAOC,IAAV,KCgBVC,MAbf,WACE,OACE,yBAAKC,MAAO,CAAEC,UAAW,WACvB,4BAAQD,MAAO,CAAEE,WAAY,UAAWC,OAAQ,OAAQC,MAAO,SAA/D,OAGA,kBAACR,EAAD,KACE,kBAAC,EAAD,SCAYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2fbc0c5d.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst HomePage = () => {\n  const history = useHistory();\n\n  const handleToLogin = () => {\n    history.push(\"/login\");\n  };\n\n  const handleToForm = () => {\n    history.push(\"/form\");\n  };\n\n  const handleToCreate = () => {\n    history.push(\"/create\");\n  };\n\n  const handleToList = () => {\n    history.push(\"/list\");\n  };\n\n  const handleToDetails = () => {\n    history.push(\"/details\");\n  };\n\n  return (\n    <div>\n      <h1>HomePage</h1>\n      <button onClick={handleToForm}>Ir para Form</button>\n      <button onClick={handleToCreate}>Ir para Criar</button>\n      <button onClick={handleToList}>Ir para Lista</button>\n      <button onClick={handleToLogin}>Ir para login</button>\n      <button onClick={handleToDetails}>Ir para Detalhes</button>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst LoginPage = () => {\n  const history = useHistory();\n\n  const handleToHome = () => {\n    history.push(\"/\");\n  };\n\n  return (\n    <div>\n      <h2>LoginPage</h2>\n      <button onClick={handleToHome}>home</button>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ApplicationFormPage = () => {\n  const history = useHistory();\n\n  const handleToHome = () => {\n    history.push(\"/\");\n  };\n\n  return (\n    <div>\n      <h1>Form</h1>\n      <button onClick={handleToHome}>home</button>\n    </div>\n  );\n};\n\nexport default ApplicationFormPage;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ListTripPage = () => {\n  const history = useHistory();\n\n  const handleToHome = () => {\n    history.push(\"/\");\n  };\n\n  return (\n    <div>\n      <h1>List</h1>\n      <p onClick={handleToHome}> paragr√°fo de teste</p>\n    </div>\n  );\n};\n\nexport default ListTripPage;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport HomePage from \"./Pages/HomePage\";\nimport LoginPage from \"./Pages/LoginPage\";\nimport ApplicationFormPage from \"./Pages/ApplicationFormPage\";\nimport ListTripsPage from \"./Pages/ListTripsPage\";\nimport CreateTripPage from \"./Pages/CreateTripPage\";\nimport TripDetailsPage from \"./Pages/TripDetailsPage\";\n\nconst Router = () => {\n  return (\n    <div>\n      <h1>Router</h1>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route exact path=\"/login\">\n            <LoginPage />\n          </Route>\n          <Route exact path=\"/form\">\n            <ApplicationFormPage />\n          </Route>\n          <Route exact path=\"/create\">\n            <CreateTripPage />\n          </Route>\n          <Route exact path=\"/list\">\n            <ListTripsPage />\n          </Route>\n          <Route exact path=\"/details\">\n            <TripDetailsPage />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default Router;\n","import styled from \"styled-components\";\n\nexport const GlobalStyles = styled.div`\n  border: solid 1px black;\n`;\n","import React from \"react\";\nimport Router from \"./Router\";\n\nimport { GlobalStyles } from \"./styles/GlobalStyles\";\n\nfunction App() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <header style={{ background: \"#151515\", height: \"50px\", color: \"#fff\" }}>\n        App\n      </header>\n      <GlobalStyles>\n        <Router />\n      </GlobalStyles>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}